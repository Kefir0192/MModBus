#ifndef MODBUS_RTU_SLAVE
#define MODBUS_RTU_SLAVE

// Размер входного/выходного буфера
#define SIZE_UART_BUFFER	255

#define MODBUSRTUSLAVE_PERIOD_15_MAX    2
#define MODBUSRTUSLAVE_PERIOD_35_MIN    4
#define MODBUSRTUSLAVE_ADD_BYTE_END     0 // 0 + 1

//-----------------------------------------------------
// Буфер передатчика/приемника
//-----------------------------------------------------
typedef struct {
    uint8_t byte[SIZE_UART_BUFFER];
}MODBUSBUFFER;

//-----------------------------------------------------
// Структура данных ModBusRTU_Slave стека
//-----------------------------------------------------
struct modbus_rtu_slave {
    //----------------------------------------------------
    // Структура адрес и скорость устройства
    //----------------------------------------------------
    struct {                                            //
        uint8_t Addr,                                   // Адрес устройства
                Speed;                                  // Скорость устройства
    }DeviceAddrSpeed;                                   //
    //----------------------------------------------------
    //  Если обнаружен разрыв между символами длительностью более 1,5
    //  времени передачи одного символа, то приемник должен поставить «черную метку»
    //----------------------------------------------------
    struct {                                            //
        uint8_t	Enable;                                 // Разрешаем отсчет времени
        uint8_t	Value;                                  // Текущие значение счетчика
    }RxTimerBytes;                                      //
    //----------------------------------------------------
    //  В Modbus RTU разделителем сообщений (фреймов, содержащих запросы и ответы)
    //  является тишина на линии в течение не менее 3,5 символов. С учетом того,
    //  что стандартный символ передается УАРТом 11-ю битами
    //----------------------------------------------------
    struct {                                            //
        uint8_t	Enable;                                 // Разрешаем отсчет времени
        uint8_t	Value;                                  // Текущие значение счетчика
    }RxTimerFrame;                                      //
    //----------------------------------------------------
    //
    //----------------------------------------------------
    struct {                                            //
        uint8_t	Enable;                                 //
        uint8_t	Value;                                  //
    }TxTimerBytes;                                      //
    //----------------------------------------------------
    // Уникальная карта регистров
    //----------------------------------------------------
    struct {                                            //
        struct modbus_slave_registers_subarray *pHeaders;// Указатель на массив карт регистров
        uint8_t	NumSubArray;                            // Число подмассивов карт регистров
    }Registers_map;                                     //
    //----------------------------------------------------
    //
    //----------------------------------------------------
    uint8_t	RxPacket,                                   //  Устанавливается 1-ца если принимаем следующие байты, 0 принимаем первый байт
            RxByteOffset,                               //  Указатель буфера
            ReadyRxData,                                //  Флаг принятого фрейма
            Counter,
            ByteNumber;

    MODBUSBUFFER    RxBufferTxBuffer;
};

#endif // MODBUS_RTU_SLAVE

